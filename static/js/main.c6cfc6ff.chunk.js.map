{"version":3,"sources":["Profile/Profile.module.css","FriendList/Friends.module.css","Statistics/Statistics.module.css","TransactionHistory/Transaction-history.module.css","Profile/Profile.js","Statistics/Statistics.js","FriendList/FriendsList.js","TransactionHistory/Transaction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","className","styles","profile","description","src","avatar","alt","name","tag","location","stats","label","quantity","followers","views","likes","Statistics","statistics","title","list","map","obj","key","id","num","percentage","defaultProps","Friends","friendList","friends","friend","item","isOnline","isNotOnline","width","TransactionHistory","transactionHistory","thead","tbody","items","type","amount","currency","App","user","statisticsData","friendsData","Transaction","transactionsData","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6cfc6ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2vB_Z\",\"description\":\"Profile_description__3b0-Y\",\"avatar\":\"Profile_avatar__3J0sM\",\"name\":\"Profile_name__pOR9m\",\"tag\":\"Profile_tag__M0cBh\",\"stats\":\"Profile_stats__28GrK\",\"label\":\"Profile_label__3gNLe\",\"quantity\":\"Profile_quantity__1CULK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isOnline\":\"Friends_isOnline__3DRvJ\",\"isNotOnline\":\"Friends_isNotOnline__3Ax9G\",\"friendList\":\"Friends_friendList__34Lmz\",\"item\":\"Friends_item__3VJA0\",\"name\":\"Friends_name__1Uf59\",\"avatar\":\"Friends_avatar__x10y3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__3eaGt\",\"title\":\"Statistics_title__1H9I5\",\"list\":\"Statistics_list__2RweL\",\"num\":\"Statistics_num__36LRj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thead\":\"Transaction-history_thead__17Vqi\",\"transactionHistory\":\"Transaction-history_transactionHistory__3hh0x\",\"item\":\"Transaction-history_item__34d6A\"};","import React from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction Profile(props) {\r\n  return (\r\n    <div className={styles.profile}>\r\n      <div className={styles.description}>\r\n        <img src={props.avatar} alt=\"user avatar\" className={styles.avatar} />\r\n        <p className={styles.name}>{props.name}</p>\r\n        <p className={styles.tag}>{props.tag}</p>\r\n        <p className={styles.tag}>{props.location}</p>\r\n      </div>\r\n\r\n      <ul className={styles.stats}>\r\n        <li>\r\n          <span className={styles.label}>Followers</span>\r\n          <span className={styles.quantity}> {props.stats.followers}</span>\r\n        </li>\r\n        <li>\r\n          <span className={styles.label}>Views</span>\r\n          <span className={styles.quantity}> {props.stats.views}</span>\r\n        </li>\r\n        <li>\r\n          <span className={styles.label}>Likes</span>\r\n          <span className={styles.quantity}> {props.stats.likes}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nProfile.propTypes = {\r\n  avatar: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  stats: PropTypes.object.isRequired,\r\n};\r\nexport default Profile;","import React from \"react\";\r\nimport styles from \"./Statistics.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction Statistics(props) {\r\n  return (\r\n    <section className={styles.statistics}>\r\n      <h2 className={styles.title}>{props.title}</h2>\r\n      <ul className={styles.list}>\r\n        {props.stats.map((obj) => (\r\n          <li key={obj.id}>\r\n            <span>{obj.label}</span>\r\n            <span className={styles.num}>{obj.percentage}%</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\nStatistics.defaultProps = {\r\n  title: \"No title\",\r\n};\r\n\r\nStatistics.propTypes = {\r\n  title: PropTypes.string,\r\n  stats: PropTypes.array.isRequired,\r\n};\r\nexport default Statistics;","import React from 'react';\r\nimport styles from './Friends.module.css';\r\nimport PropTypes from \"prop-types\";\r\nfunction Friends(props) {\r\n    return (\r\n        <ul className={styles.friendList}>\r\n            {props.friends.map(friend => (\r\n                <li key={friend.id} className={styles.item}>\r\n                    <span className={friend.isOnline?styles.isOnline:styles.isNotOnline}></span>\r\n                    <img className={styles.avatar} src={friend.avatar} alt=\"\" width=\"48\" />\r\n                    <p className={styles.name}>{friend.name}</p>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\nFriends.propTypes = {\r\n    friends: PropTypes.array.isRequired\r\n}\r\nexport default Friends;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Transaction-history.module.css\";\r\nfunction TransactionHistory(props) {\r\n  return (\r\n    <table className={styles.transactionHistory}>\r\n      <thead className={styles.thead}>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>Amount</th>\r\n          <th>Currency</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody className={styles.tbody}>\r\n        {props.items.map((item) => (\r\n          <tr className={styles.item} key={item.id}>\r\n            <td>{item.type}</td>\r\n            <td>{item.amount}</td>\r\n            <td>{item.currency}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTransactionHistory.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n};\r\nexport default TransactionHistory;","import React from \"react\";\nimport \"./App.css\";\nimport Profile from \"./Profile/Profile\";\nimport user from \"./Profile/user.json\";\nimport Statistics from \"./Statistics/Statistics\";\nimport statisticsData from \"./Statistics/statistics-data.json\";\nimport Friends from \"./FriendList/FriendsList\";\nimport friendsData from \"./FriendList/friend-list.json\";\nimport TransactionHistory from \"./TransactionHistory/Transaction\";\nimport transactionsData from \"./TransactionHistory/transactions.json\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Profile\n          name={user.name}\n          tag={user.tag}\n          avatar={user.avatar}\n          location={user.location}\n          stats={user.stats}\n        />\n        <Statistics title=\"Upload stats\" stats={statisticsData} />\n        <Friends friends={friendsData} />\n        <TransactionHistory items={transactionsData} />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}